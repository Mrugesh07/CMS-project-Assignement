# Generated by Django 5.0.2 on 2024-02-14 09:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^\\d{10}$')])),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('pincode', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator('^\\d{6}$')])),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Please enter a valid email address.')])),
                ('password', models.CharField(max_length=128, validators=[django.core.validators.MinLengthValidator(limit_value=8, message='Password must be at least 8 characters long.'), django.core.validators.RegexValidator('[A-Z]', message='Password must contain at least one uppercase letter.'), django.core.validators.RegexValidator('[a-z]', message='Password must contain at least one lowercase letter.')])),
                ('first_name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator('^[A-Za-z ]+$', message='Please enter a valid first name.')])),
                ('last_name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator('^[A-Za-z ]+$', message='Please enter a valid last name.')])),
                ('groups', models.ManyToManyField(related_name='user_set_custom', related_query_name='user_custom', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='user_set_custom', related_query_name='user_custom', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContentItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('body', models.CharField(max_length=300)),
                ('summary', models.CharField(max_length=60)),
                ('document', models.FileField(upload_to='documents/', validators=[django.core.validators.FileExtensionValidator(['pdf'], 'Only PDF files are allowed.')])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_items', related_query_name='content_item', to='cms_app.user')),
            ],
        ),
    ]
